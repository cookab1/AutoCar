
AutoCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  000005dc  00000670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000083d  00800210  00800210  00000680  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000720  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d10  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f9  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d4  00000000  00000000  000037f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  000048c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a38  00000000  00000000  00004c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a06  00000000  00000000  000056a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000060ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	5c c1       	rjmp	.+696    	; 0x2de <__vector_9>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c2       	rjmp	.+1144   	; 0x4ce <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ed       	ldi	r30, 0xDC	; 220
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2a e0       	ldi	r18, 0x0A	; 10
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 34       	cpi	r26, 0x4D	; 77
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	86 d0       	rcall	.+268    	; 0x22c <main>
 120:	5b c2       	rjmp	.+1206   	; 0x5d8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
 124:	2f 92       	push	r2
 126:	3f 92       	push	r3
 128:	4f 92       	push	r4
 12a:	5f 92       	push	r5
 12c:	6f 92       	push	r6
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <x_thread_id>
 14c:	30 91 4c 0a 	lds	r19, 0x0A4C	; 0x800a4c <x_thread_mask>
 150:	f8 94       	cli
 152:	ed b6       	in	r14, 0x3d	; 61
 154:	fe b6       	in	r15, 0x3e	; 62
 156:	78 94       	sei
 158:	ea e1       	ldi	r30, 0x1A	; 26
 15a:	f2 e0       	ldi	r31, 0x02	; 2
 15c:	22 0f       	add	r18, r18
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d2 e0       	ldi	r29, 0x02	; 2
 162:	c2 0f       	add	r28, r18
 164:	d1 1d       	adc	r29, r1
 166:	19 91       	ld	r17, Y+
 168:	d8 81       	ld	r29, Y
 16a:	c1 2f       	mov	r28, r17
 16c:	18 81       	ld	r17, Y
 16e:	1a 3a       	cpi	r17, 0xAA	; 170
 170:	21 f0       	breq	.+8      	; 0x17a <x_yield+0x56>
 172:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <x_thread_id>
 176:	91 2d       	mov	r25, r1
 178:	f6 c1       	rjmp	.+1004   	; 0x566 <x_stack_overflow>
 17a:	22 0f       	add	r18, r18
 17c:	e2 0f       	add	r30, r18
 17e:	f1 1d       	adc	r31, r1
 180:	e1 92       	st	Z+, r14
 182:	f0 82       	st	Z, r15

00000184 <x_schedule>:
 184:	20 91 4b 0a 	lds	r18, 0x0A4B	; 0x800a4b <x_disable_status>
 188:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <x_delay_status>
 18c:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <x_suspend_status>
 190:	23 2b       	or	r18, r19
 192:	24 2b       	or	r18, r20
 194:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <x_thread_id>
 198:	40 91 4c 0a 	lds	r20, 0x0A4C	; 0x800a4c <x_thread_mask>
 19c:	68 e0       	ldi	r22, 0x08	; 8
 19e:	88 94       	clc
 1a0:	33 95       	inc	r19
 1a2:	37 70       	andi	r19, 0x07	; 7
 1a4:	44 1f       	adc	r20, r20
 1a6:	41 1d       	adc	r20, r1
 1a8:	74 2f       	mov	r23, r20
 1aa:	42 23       	and	r20, r18
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <restore>
 1ae:	6a 95       	dec	r22
 1b0:	b9 f7       	brne	.-18     	; 0x1a0 <x_schedule+0x1c>
 1b2:	e8 cf       	rjmp	.-48     	; 0x184 <x_schedule>

000001b4 <restore>:
 1b4:	30 93 18 02 	sts	0x0218, r19	; 0x800218 <x_thread_id>
 1b8:	70 93 4c 0a 	sts	0x0A4C, r23	; 0x800a4c <x_thread_mask>
 1bc:	ea e1       	ldi	r30, 0x1A	; 26
 1be:	f2 e0       	ldi	r31, 0x02	; 2
 1c0:	33 0f       	add	r19, r19
 1c2:	33 0f       	add	r19, r19
 1c4:	e3 0f       	add	r30, r19
 1c6:	f1 1d       	adc	r31, r1
 1c8:	21 91       	ld	r18, Z+
 1ca:	30 81       	ld	r19, Z
 1cc:	f8 94       	cli
 1ce:	2d bf       	out	0x3d, r18	; 61
 1d0:	3e bf       	out	0x3e, r19	; 62
 1d2:	78 94       	sei
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	bf 90       	pop	r11
 1e6:	af 90       	pop	r10
 1e8:	9f 90       	pop	r9
 1ea:	8f 90       	pop	r8
 1ec:	7f 90       	pop	r7
 1ee:	6f 90       	pop	r6
 1f0:	5f 90       	pop	r5
 1f2:	85 2d       	mov	r24, r5
 1f4:	4f 90       	pop	r4
 1f6:	94 2d       	mov	r25, r4
 1f8:	3f 90       	pop	r3
 1fa:	63 2d       	mov	r22, r3
 1fc:	2f 90       	pop	r2
 1fe:	72 2d       	mov	r23, r2
 200:	08 95       	ret

00000202 <bit2mask8>:
 202:	ee e0       	ldi	r30, 0x0E	; 14
 204:	f2 e0       	ldi	r31, 0x02	; 2
 206:	e8 0f       	add	r30, r24
 208:	f1 1d       	adc	r31, r1
 20a:	84 91       	lpm	r24, Z
 20c:	08 95       	ret

0000020e <bitmask8_table>:
 20e:	01 02       	muls	r16, r17
 210:	04 08       	sbc	r0, r4
 212:	10 20       	and	r1, r0
 214:	40 80       	ld	r4, Z

00000216 <trackListener>:
	}
}

void trackListener() {
	while(1) {
		if(onTrack()) {
 216:	8c d0       	rcall	.+280    	; 0x330 <onTrack>
 218:	89 2b       	or	r24, r25
 21a:	09 f0       	breq	.+2      	; 0x21e <trackListener+0x8>
			stop();
 21c:	1c d0       	rcall	.+56     	; 0x256 <stop>
 21e:	85 e0       	ldi	r24, 0x05	; 5
			//correct alignment
		}
		x_delay(5);
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	3f d1       	rcall	.+638    	; 0x4a2 <x_delay>
 224:	f8 cf       	rjmp	.-16     	; 0x216 <trackListener>

00000226 <setUp>:
	}
 226:	82 d0       	rcall	.+260    	; 0x32c <init_tracker>
}

void setUp() {
	init_tracker();
	init_motors();
 228:	22 c0       	rjmp	.+68     	; 0x26e <init_motors>
 22a:	08 95       	ret

0000022c <main>:
 22c:	fc df       	rcall	.-8      	; 0x226 <setUp>

int main(void)
{
	setUp();
	
	x_init();
 22e:	c2 d0       	rcall	.+388    	; 0x3b4 <x_init>
 230:	41 e0       	ldi	r20, 0x01	; 1
	//initialize threads
	x_new(1, trackListener, true);
 232:	6b e0       	ldi	r22, 0x0B	; 11
 234:	71 e0       	ldi	r23, 0x01	; 1
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	7f d0       	rcall	.+254    	; 0x338 <x_new>
	//x_new(2, blinky, true);
	//x_delay(5000);
	//forward1s();
	//backward1s();
	
	setDirectionForward();
 23a:	08 d0       	rcall	.+16     	; 0x24c <setDirectionForward>
	rightSpeed(0xFF);
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	43 d0       	rcall	.+134    	; 0x2c6 <rightSpeed>
	leftSpeed(0xFF);
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	47 d0       	rcall	.+142    	; 0x2d2 <leftSpeed>
 244:	84 e6       	ldi	r24, 0x64	; 100
	//thread 0
    while (1) 
    {
		x_delay(100);
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	2c d1       	rcall	.+600    	; 0x4a2 <x_delay>
 24a:	fc cf       	rjmp	.-8      	; 0x244 <main+0x18>

0000024c <setDirectionForward>:
 24c:	40 9a       	sbi	0x08, 0	; 8
 24e:	41 98       	cbi	0x08, 1	; 8
	
}

void leftDirectionBackward() {
	PORTC |= (1 << IN3);
	PORTC &= ~(1 << IN4);
 250:	42 98       	cbi	0x08, 2	; 8
 252:	43 9a       	sbi	0x08, 3	; 8
 254:	08 95       	ret

00000256 <stop>:
 256:	88 b1       	in	r24, 0x08	; 8
 258:	80 7f       	andi	r24, 0xF0	; 240
 25a:	88 b9       	out	0x08, r24	; 8
 25c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 260:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 264:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 268:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 26c:	08 95       	ret

0000026e <init_motors>:
 26e:	e1 e0       	ldi	r30, 0x01	; 1
 270:	f1 e0       	ldi	r31, 0x01	; 1
 272:	80 81       	ld	r24, Z
 274:	88 60       	ori	r24, 0x08	; 8
 276:	80 83       	st	Z, r24
 278:	6b 9a       	sbi	0x0d, 3	; 13
 27a:	87 b1       	in	r24, 0x07	; 7
 27c:	8f 70       	andi	r24, 0x0F	; 15
 27e:	87 b9       	out	0x07, r24	; 7
 280:	e0 ea       	ldi	r30, 0xA0	; 160
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	81 68       	ori	r24, 0x81	; 129
 288:	80 83       	st	Z, r24
 28a:	a1 ea       	ldi	r26, 0xA1	; 161
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	8c 91       	ld	r24, X
 290:	88 60       	ori	r24, 0x08	; 8
 292:	8c 93       	st	X, r24
 294:	e0 e9       	ldi	r30, 0x90	; 144
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	81 68       	ori	r24, 0x81	; 129
 29c:	80 83       	st	Z, r24
 29e:	e1 e9       	ldi	r30, 0x91	; 145
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	88 60       	ori	r24, 0x08	; 8
 2a6:	80 83       	st	Z, r24
 2a8:	8c 91       	ld	r24, X
 2aa:	81 60       	ori	r24, 0x01	; 1
 2ac:	8c 93       	st	X, r24
 2ae:	80 81       	ld	r24, Z
 2b0:	81 60       	ori	r24, 0x01	; 1
 2b2:	80 83       	st	Z, r24
 2b4:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 2b8:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 2bc:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 2c0:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 2c4:	08 95       	ret

000002c6 <rightSpeed>:
 *
 * Acceptable range for percent value: 0x90 to 0xFF
 * See setSpeed for full explanation.
 */
void rightSpeed (uint8_t percent) {
	OCR4A = percent;
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 2cc:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 2d0:	08 95       	ret

000002d2 <leftSpeed>:
 *
 * Acceptable range for percent value: 0x90 to 0xFF
 * See setSpeed for full explanation.
 */
void leftSpeed (uint8_t percent) {
	OCR3A = percent;
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 2d8:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 2dc:	08 95       	ret

000002de <__vector_9>:
	}
	
	return min;
}

ISR(PCINT0_vect) {
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
	static uint16_t rising_edge = 0;
	uint16_t curr = TCNT1;
 2f0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 2f4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	uint8_t line = PINB & ECHO_PIN;
	
	if (line)
 2f8:	18 9b       	sbis	0x03, 0	; 3
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <__vector_9+0x28>
		rising_edge = curr;
 2fc:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <__data_end+0x1>
 300:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
 304:	0a c0       	rjmp	.+20     	; 0x31a <__vector_9+0x3c>
	else
		reading = curr - rising_edge;
 306:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__data_end>
 30a:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__data_end+0x1>
 30e:	82 1b       	sub	r24, r18
 310:	93 0b       	sbc	r25, r19
 312:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <reading+0x1>
 316:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <reading>
}
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <init_tracker>:
int pinUsed;

void init_tracker()
{
	//pinUsed = pin;
	DDRF = 0x00;
 32c:	10 ba       	out	0x10, r1	; 16
 32e:	08 95       	ret

00000330 <onTrack>:

//returns true if black is being seen
//returns false if something visible is there
int onTrack() 
{
	if ((PINF & (1 << 0)) == 0)
 330:	8f b1       	in	r24, 0x0f	; 15
		return 0;
	else
		return 1;
}
 332:	81 70       	andi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	08 95       	ret

00000338 <x_new>:
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	c8 2f       	mov	r28, r24
 33e:	d4 2f       	mov	r29, r20
 340:	e8 2f       	mov	r30, r24
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	ee 0f       	add	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	9f 01       	movw	r18, r30
 34e:	26 5e       	subi	r18, 0xE6	; 230
 350:	3d 4f       	sbci	r19, 0xFD	; 253
 352:	f9 01       	movw	r30, r18
 354:	a2 81       	ldd	r26, Z+2	; 0x02
 356:	b3 81       	ldd	r27, Z+3	; 0x03
 358:	6c 93       	st	X, r22
 35a:	cd 01       	movw	r24, r26
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	fc 01       	movw	r30, r24
 360:	70 83       	st	Z, r23
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	fc 01       	movw	r30, r24
 366:	10 82       	st	Z, r1
 368:	55 97       	sbiw	r26, 0x15	; 21
 36a:	f9 01       	movw	r30, r18
 36c:	b1 83       	std	Z+1, r27	; 0x01
 36e:	a0 83       	st	Z, r26
 370:	8c 2f       	mov	r24, r28
 372:	47 df       	rcall	.-370    	; 0x202 <bit2mask8>
 374:	dd 23       	and	r29, r29
 376:	41 f0       	breq	.+16     	; 0x388 <x_new+0x50>
 378:	98 2f       	mov	r25, r24
 37a:	90 95       	com	r25
 37c:	80 91 4b 0a 	lds	r24, 0x0A4B	; 0x800a4b <x_disable_status>
 380:	98 23       	and	r25, r24
 382:	90 93 4b 0a 	sts	0x0A4B, r25	; 0x800a4b <x_disable_status>
 386:	05 c0       	rjmp	.+10     	; 0x392 <x_new+0x5a>
 388:	90 91 4b 0a 	lds	r25, 0x0A4B	; 0x800a4b <x_disable_status>
 38c:	98 2b       	or	r25, r24
 38e:	90 93 4b 0a 	sts	0x0A4B, r25	; 0x800a4b <x_disable_status>
 392:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <x_thread_id>
 396:	c8 13       	cpse	r28, r24
 398:	01 c0       	rjmp	.+2      	; 0x39c <x_new+0x64>
 39a:	f4 de       	rcall	.-536    	; 0x184 <x_schedule>
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <init_System_Timer>:
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	84 bd       	out	0x24, r24	; 36
 3a6:	9a ef       	ldi	r25, 0xFA	; 250
 3a8:	97 bd       	out	0x27, r25	; 39
 3aa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 3ae:	83 e0       	ldi	r24, 0x03	; 3
 3b0:	85 bd       	out	0x25, r24	; 37
 3b2:	08 95       	ret

000003b4 <x_init>:
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	f8 94       	cli
 3ba:	8e ef       	ldi	r24, 0xFE	; 254
 3bc:	80 93 4b 0a 	sts	0x0A4B, r24	; 0x800a4b <x_disable_status>
 3c0:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <x_suspend_status>
 3c4:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <x_delay_status>
 3c8:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <x_thread_id>
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <x_thread_mask>
 3d2:	ca e1       	ldi	r28, 0x1A	; 26
 3d4:	d2 e0       	ldi	r29, 0x02	; 2
 3d6:	8a e3       	ldi	r24, 0x3A	; 58
 3d8:	93 e0       	ldi	r25, 0x03	; 3
 3da:	99 83       	std	Y+1, r25	; 0x01
 3dc:	88 83       	st	Y, r24
 3de:	9b 83       	std	Y+3, r25	; 0x03
 3e0:	8a 83       	std	Y+2, r24	; 0x02
 3e2:	8a e3       	ldi	r24, 0x3A	; 58
 3e4:	94 e0       	ldi	r25, 0x04	; 4
 3e6:	9d 83       	std	Y+5, r25	; 0x05
 3e8:	8c 83       	std	Y+4, r24	; 0x04
 3ea:	9f 83       	std	Y+7, r25	; 0x07
 3ec:	8e 83       	std	Y+6, r24	; 0x06
 3ee:	8a e3       	ldi	r24, 0x3A	; 58
 3f0:	95 e0       	ldi	r25, 0x05	; 5
 3f2:	99 87       	std	Y+9, r25	; 0x09
 3f4:	88 87       	std	Y+8, r24	; 0x08
 3f6:	9b 87       	std	Y+11, r25	; 0x0b
 3f8:	8a 87       	std	Y+10, r24	; 0x0a
 3fa:	8a e3       	ldi	r24, 0x3A	; 58
 3fc:	96 e0       	ldi	r25, 0x06	; 6
 3fe:	9d 87       	std	Y+13, r25	; 0x0d
 400:	8c 87       	std	Y+12, r24	; 0x0c
 402:	9f 87       	std	Y+15, r25	; 0x0f
 404:	8e 87       	std	Y+14, r24	; 0x0e
 406:	8a e3       	ldi	r24, 0x3A	; 58
 408:	97 e0       	ldi	r25, 0x07	; 7
 40a:	99 8b       	std	Y+17, r25	; 0x11
 40c:	88 8b       	std	Y+16, r24	; 0x10
 40e:	9b 8b       	std	Y+19, r25	; 0x13
 410:	8a 8b       	std	Y+18, r24	; 0x12
 412:	8a e3       	ldi	r24, 0x3A	; 58
 414:	98 e0       	ldi	r25, 0x08	; 8
 416:	9d 8b       	std	Y+21, r25	; 0x15
 418:	8c 8b       	std	Y+20, r24	; 0x14
 41a:	9f 8b       	std	Y+23, r25	; 0x17
 41c:	8e 8b       	std	Y+22, r24	; 0x16
 41e:	8a e3       	ldi	r24, 0x3A	; 58
 420:	99 e0       	ldi	r25, 0x09	; 9
 422:	99 8f       	std	Y+25, r25	; 0x19
 424:	88 8f       	std	Y+24, r24	; 0x18
 426:	9b 8f       	std	Y+27, r25	; 0x1b
 428:	8a 8f       	std	Y+26, r24	; 0x1a
 42a:	8a e3       	ldi	r24, 0x3A	; 58
 42c:	9a e0       	ldi	r25, 0x0A	; 10
 42e:	9d 8f       	std	Y+29, r25	; 0x1d
 430:	8c 8f       	std	Y+28, r24	; 0x1c
 432:	9f 8f       	std	Y+31, r25	; 0x1f
 434:	8e 8f       	std	Y+30, r24	; 0x1e
 436:	8a ea       	ldi	r24, 0xAA	; 170
 438:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <x_thread_stacks>
 43c:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <x_thread_stacks+0x100>
 440:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <x_thread_stacks+0x200>
 444:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <x_thread_stacks+0x300>
 448:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <x_thread_stacks+0x400>
 44c:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <x_thread_stacks+0x500>
 450:	80 93 3b 08 	sts	0x083B, r24	; 0x80083b <x_thread_stacks+0x600>
 454:	80 93 3b 09 	sts	0x093B, r24	; 0x80093b <x_thread_stacks+0x700>
 458:	a4 df       	rcall	.-184    	; 0x3a2 <init_System_Timer>
 45a:	ed b7       	in	r30, 0x3d	; 61
 45c:	fe b7       	in	r31, 0x3e	; 62
 45e:	a8 81       	ld	r26, Y
 460:	b9 81       	ldd	r27, Y+1	; 0x01
 462:	85 81       	ldd	r24, Z+5	; 0x05
 464:	8c 93       	st	X, r24
 466:	a8 81       	ld	r26, Y
 468:	b9 81       	ldd	r27, Y+1	; 0x01
 46a:	84 81       	ldd	r24, Z+4	; 0x04
 46c:	11 97       	sbiw	r26, 0x01	; 1
 46e:	8c 93       	st	X, r24
 470:	a8 81       	ld	r26, Y
 472:	b9 81       	ldd	r27, Y+1	; 0x01
 474:	83 81       	ldd	r24, Z+3	; 0x03
 476:	12 97       	sbiw	r26, 0x02	; 2
 478:	8c 93       	st	X, r24
 47a:	a8 81       	ld	r26, Y
 47c:	b9 81       	ldd	r27, Y+1	; 0x01
 47e:	82 81       	ldd	r24, Z+2	; 0x02
 480:	13 97       	sbiw	r26, 0x03	; 3
 482:	8c 93       	st	X, r24
 484:	88 81       	ld	r24, Y
 486:	99 81       	ldd	r25, Y+1	; 0x01
 488:	21 81       	ldd	r18, Z+1	; 0x01
 48a:	fc 01       	movw	r30, r24
 48c:	34 97       	sbiw	r30, 0x04	; 4
 48e:	20 83       	st	Z, r18
 490:	88 81       	ld	r24, Y
 492:	99 81       	ldd	r25, Y+1	; 0x01
 494:	05 97       	sbiw	r24, 0x05	; 5
 496:	9e bf       	out	0x3e, r25	; 62
 498:	8d bf       	out	0x3d, r24	; 61
 49a:	78 94       	sei
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <x_delay>:
 4a2:	9c 01       	movw	r18, r24
 4a4:	9f b7       	in	r25, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <x_thread_id>
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	ee 0f       	add	r30, r30
 4b0:	ff 1f       	adc	r31, r31
 4b2:	e5 5c       	subi	r30, 0xC5	; 197
 4b4:	f5 4f       	sbci	r31, 0xF5	; 245
 4b6:	31 83       	std	Z+1, r19	; 0x01
 4b8:	20 83       	st	Z, r18
 4ba:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <x_delay_status>
 4be:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <x_thread_mask>
 4c2:	82 2b       	or	r24, r18
 4c4:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <x_delay_status>
 4c8:	9f bf       	out	0x3f, r25	; 63
 4ca:	2c ce       	rjmp	.-936    	; 0x124 <x_yield>
 4cc:	08 95       	ret

000004ce <__vector_21>:
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	0b b6       	in	r0, 0x3b	; 59
 4da:	0f 92       	push	r0
 4dc:	2f 93       	push	r18
 4de:	3f 93       	push	r19
 4e0:	4f 93       	push	r20
 4e2:	5f 93       	push	r21
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
 4e8:	af 93       	push	r26
 4ea:	bf 93       	push	r27
 4ec:	ef 93       	push	r30
 4ee:	ff 93       	push	r31
 4f0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <x_system_counter>
 4f4:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <x_system_counter+0x1>
 4f8:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <x_system_counter+0x2>
 4fc:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <x_system_counter+0x3>
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	a1 1d       	adc	r26, r1
 504:	b1 1d       	adc	r27, r1
 506:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <x_system_counter>
 50a:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <x_system_counter+0x1>
 50e:	a0 93 16 02 	sts	0x0216, r26	; 0x800216 <x_system_counter+0x2>
 512:	b0 93 17 02 	sts	0x0217, r27	; 0x800217 <x_system_counter+0x3>
 516:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <x_delay_status>
 51a:	eb e3       	ldi	r30, 0x3B	; 59
 51c:	fa e0       	ldi	r31, 0x0A	; 10
 51e:	4b e4       	ldi	r20, 0x4B	; 75
 520:	5a e0       	ldi	r21, 0x0A	; 10
 522:	21 e0       	ldi	r18, 0x01	; 1
 524:	80 81       	ld	r24, Z
 526:	91 81       	ldd	r25, Z+1	; 0x01
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	81 93       	st	Z+, r24
 52c:	91 93       	st	Z+, r25
 52e:	89 2b       	or	r24, r25
 530:	19 f4       	brne	.+6      	; 0x538 <__vector_21+0x6a>
 532:	82 2f       	mov	r24, r18
 534:	80 95       	com	r24
 536:	38 23       	and	r19, r24
 538:	22 0f       	add	r18, r18
 53a:	e4 17       	cp	r30, r20
 53c:	f5 07       	cpc	r31, r21
 53e:	91 f7       	brne	.-28     	; 0x524 <__vector_21+0x56>
 540:	30 93 19 02 	sts	0x0219, r19	; 0x800219 <x_delay_status>
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	bf 91       	pop	r27
 54a:	af 91       	pop	r26
 54c:	9f 91       	pop	r25
 54e:	8f 91       	pop	r24
 550:	5f 91       	pop	r21
 552:	4f 91       	pop	r20
 554:	3f 91       	pop	r19
 556:	2f 91       	pop	r18
 558:	0f 90       	pop	r0
 55a:	0b be       	out	0x3b, r0	; 59
 55c:	0f 90       	pop	r0
 55e:	0f be       	out	0x3f, r0	; 63
 560:	0f 90       	pop	r0
 562:	1f 90       	pop	r1
 564:	18 95       	reti

00000566 <x_stack_overflow>:
 566:	ac 01       	movw	r20, r24
 568:	27 9a       	sbi	0x04, 7	; 4
 56a:	2f 98       	cbi	0x05, 7	; 5
   must be defined before including this header file. Also, the
   backward compatible algorithm will be chosen if the code is
   compiled in a <em>freestanding environment</em> (GCC option
   \c -ffreestanding), as the math functions required for rounding are
   not available to the compiler then.

 56c:	2f ef       	ldi	r18, 0xFF	; 255
 56e:	31 ee       	ldi	r19, 0xE1	; 225
 570:	74 e0       	ldi	r23, 0x04	; 4
 572:	21 50       	subi	r18, 0x01	; 1
 574:	30 40       	sbci	r19, 0x00	; 0
 576:	70 40       	sbci	r23, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <x_stack_overflow+0xc>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <x_stack_overflow+0x16>
 57c:	00 00       	nop
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	55 23       	and	r21, r21
 584:	fc f0       	brlt	.+62     	; 0x5c4 <x_stack_overflow+0x5e>
 586:	26 2f       	mov	r18, r22
 588:	38 2f       	mov	r19, r24
 58a:	95 b1       	in	r25, 0x05	; 5
 58c:	90 58       	subi	r25, 0x80	; 128
 58e:	95 b9       	out	0x05, r25	; 5
 590:	9f ef       	ldi	r25, 0xFF	; 255
 592:	e0 e7       	ldi	r30, 0x70	; 112
 594:	72 e0       	ldi	r23, 0x02	; 2
 596:	91 50       	subi	r25, 0x01	; 1
 598:	e0 40       	sbci	r30, 0x00	; 0
 59a:	70 40       	sbci	r23, 0x00	; 0
 59c:	e1 f7       	brne	.-8      	; 0x596 <x_stack_overflow+0x30>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <x_stack_overflow+0x3a>
 5a0:	00 00       	nop
 5a2:	95 b1       	in	r25, 0x05	; 5
 5a4:	90 58       	subi	r25, 0x80	; 128
 5a6:	95 b9       	out	0x05, r25	; 5
 5a8:	9f ef       	ldi	r25, 0xFF	; 255
 5aa:	e9 e6       	ldi	r30, 0x69	; 105
 5ac:	78 e1       	ldi	r23, 0x18	; 24
 5ae:	91 50       	subi	r25, 0x01	; 1
 5b0:	e0 40       	sbci	r30, 0x00	; 0
 5b2:	70 40       	sbci	r23, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <x_stack_overflow+0x48>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <x_stack_overflow+0x52>
 5b8:	00 00       	nop
 5ba:	2f 5f       	subi	r18, 0xFF	; 255
 5bc:	3f 4f       	sbci	r19, 0xFF	; 255
 5be:	42 17       	cp	r20, r18
 5c0:	53 07       	cpc	r21, r19
 5c2:	1c f7       	brge	.-58     	; 0x58a <x_stack_overflow+0x24>
 5c4:	9f ef       	ldi	r25, 0xFF	; 255
 5c6:	e3 e2       	ldi	r30, 0x23	; 35
 5c8:	24 ef       	ldi	r18, 0xF4	; 244
 5ca:	91 50       	subi	r25, 0x01	; 1
 5cc:	e0 40       	sbci	r30, 0x00	; 0
 5ce:	20 40       	sbci	r18, 0x00	; 0
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <x_stack_overflow+0x64>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <x_stack_overflow+0x6e>
 5d4:	00 00       	nop
 5d6:	d5 cf       	rjmp	.-86     	; 0x582 <x_stack_overflow+0x1c>

000005d8 <_exit>:
 5d8:	f8 94       	cli

000005da <__stop_program>:
 5da:	ff cf       	rjmp	.-2      	; 0x5da <__stop_program>
